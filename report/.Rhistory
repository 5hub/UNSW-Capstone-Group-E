#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
dem_nsw$Date <- str_extract("[0-9]?[0-9]\\/[0-9]?[0-9]\\/[0-9]{4}", (dem_nsw$DATETIME))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
#temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
#dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
dem_nsw$Date <- str_extract("[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}", (dem_nsw$DATETIME))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
#temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
#dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
dem_nsw$Time <- str_extract("[0-9]?[0-9]:[0-9]?[0-9]", (dem_nsw$DATETIME))
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
#dem_nsw$Date <- str_extract("[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}", (dem_nsw$DATETIME))
#dem_nsw$Time <- str_extract("[0-9]?[0-9]:[0-9]?[0-9]", (dem_nsw$DATETIME))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
#temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
#dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]{2}:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
#temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
#dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
#temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
#dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
temp_nsw <- temp_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
temp_nsw <- temp_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
#temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
#dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
# Split DATETIME into Date and Time columns
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
temp_nsw <- temp_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
temp_nsw <- temp_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
#temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
#dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
# Split DATETIME into Date and Time columns
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
temp_nsw <- temp_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
temp_nsw <- temp_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Check the count of all unique time values in each data frame
as.data.frame(table(temp_nsw$Time))
as.data.frame(table(dem_nsw$Time))
# Check for duplicates
dem_nsw[duplicated(dem_nsw[, ]), ]
# Check for duplicates
dem_nsw[duplicated(dem_nsw[, ]), ]
temp_nsw[duplicated(temp_nsw[, ]), ]
# Check for duplicates
dem_nsw[duplicated(dem_nsw[, ]), ]
temp_nsw[duplicated(temp_nsw[, 3:4]), ]
as.data.frame(table(month(dem_nsw$Date)))
# Do a left merge on dem and temp data
NSW_df <- left_join(dem_nsw, temp_nsw, by = c('Date', 'Time'))
as.data.frame(table(NSW_df$Time))
# Check for duplicates
NSW_df[duplicated(NSW_df[, ]), ]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
# Split DATETIME into Date and Time columns
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
temp_nsw <- temp_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
temp_nsw <- temp_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(1)]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
# Split DATETIME into Date and Time columns
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
temp_nsw <- temp_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
temp_nsw <- temp_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Delete DATETIME columns
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
is.null(dem_nsw)
## Check for nulls
is.null(temp_nsw)
# Check the count of all unique time values in each data frame
as.data.frame(table(temp_nsw$Time))
as.data.frame(table(dem_nsw$Time))
as.data.frame(table(month(dem_nsw$Date)))
dem_nsw$Date <- as.Date(dem_nsw$Date)
as.data.frame(table(month(dem_nsw$Date)))
as.data.frame(table(mon(dem_nsw$Date)))
th
as.data.frame(table(month(dem_nsw$Date)))
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
# Import temperature and demand datasets
setwd('../data/')
temp_nsw <- read.csv(unz('H03-2021/temperature_nsw.csv.zip', 'temperature_nsw.csv'), header = T)
dem_nsw <- read.csv(unz('H03-2021/totaldemand_nsw.csv.zip', 'totaldemand_nsw.csv'), header = T)
# Can we get this to work?
#fcst_nsw <- read.csv(unz('H03-2021/forecastdemand_nsw.csv.zip.partaa', 'forecastdemand_nsw.csv'), header = T)
## Have a look at how our data has been imported
#head(temp_nsw)
#head(dem_nsw)
## Check for nulls
#is.null(temp_nsw)
#is.null(dem_nsw)
# No nulls found
# Get rid of columns that we don't require
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(3)]
# Split DATETIME into Date and Time columns
dem_nsw <- dem_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
dem_nsw <- dem_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
temp_nsw <- temp_nsw %>%
mutate("Date" = str_extract(DATETIME, "[0-9]?[0-9]/[0-9]?[0-9]/[0-9]{4}"))
temp_nsw <- temp_nsw %>%
mutate("Time" = str_extract(DATETIME, "[0-9]?[0-9]:[0-9]{2}"))
# Convert the DATETIME columns to datetime formats
#temp_nsw$DATETIME <- as.POSIXct(temp_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
#dem_nsw$DATETIME <- as.POSIXct(dem_nsw$DATETIME, format = "%d/%m/%Y %H:%M", tz = "Australia/Sydney")
# Split DATETIME column into Date and Time columns
#temp_nsw$Date <- as.Date(temp_nsw$DATETIME)
#temp_nsw$Time <- format(as.POSIXct(temp_nsw$DATETIME), format = "%H:%M")
#temp_nsw <- temp_nsw[-c(1)]
#dem_nsw$Date <- as.Date(dem_nsw$DATETIME)
#dem_nsw$Time <- format(as.POSIXct(dem_nsw$DATETIME), format = "%H:%M")
#dem_nsw <- dem_nsw[-c(1)]
# Delete DATETIME columns
temp_nsw <- temp_nsw[-c(1)]
dem_nsw <- dem_nsw[-c(1)]
# Check for any missing values.
temp_nsw[rowSums(is.na(temp_nsw)) > 0, ]
dem_nsw[rowSums(is.na(dem_nsw)) > 0, ]
# Check the count of all unique time values in each data frame
as.data.frame(table(temp_nsw$Time))
as.data.frame(table(dem_nsw$Time))
month(dem_nsw$Date)
dem_nsw %>%
group_by(Date) %>%
summarise(n_distinct(order_no))
dem_nsw %>%
group_by(Date) %>%
summarise(n_distinct(Date))
summarise(n_distinct(month(Date))
dem_nsw %>%
dem_nsw %>%
group_by(Date) %>%
summarise(n_distinct(month(Date)))
count_of_each_date <- dem_nsw %>%
group_by(Date) %>%
summarise(n_distinct(month(Date)))
View(count_of_each_date)
count_of_each_date[rowSums(count_of_each_date[2,])) > 0, ]
count_of_each_date[rowSums(count_of_each_date[2,)) > 0, ]
count_of_each_date[rowSums(count_of_each_date[2,) > 0, ]
count_of_each_date[rowSums(count_of_each_date[2,]) > 0, ]
count_of_each_date[2,]
count_of_each_date[,2]
count_of_each_date[rowSums(count_of_each_date[,2]) > 0, ]
count_of_each_date[rowSums(count_of_each_date[,2]) > 1, ]
count_of_each_date <- dem_nsw %>%
#  group_by(Date) %>%
summarise(n_distinct(month(Date)))
count_of_each_date <- dem_nsw %>%
group_by(Date) %>%
summarise(n_distinct(month(Date)))
count_of_each_date <- dem_nsw %>%
group_by(Date) %>%
summarise(n_distinct(month(Date)))
count_of_each_date[rowSums(count_of_each_date[,2]) > 1, ]
count_of_each_date <- dem_nsw %>%
group_by(Date) %>%
summarise((month(Date)))
count_of_each_date[rowSums(count_of_each_date[, 2]) > 1, ]
as.data.frame(table(dem_nsw$Date))
entry_count_per_day <- as.data.frame(table(dem_nsw$Date))
entry_count_per_day[entry_count_per_day[, 2] > 48, ]
entry_count_per_day[entry_count_per_day[, 2] > 47, ]
entry_count_per_day[entry_count_per_day[, 2] < 47, ]
entry_count_per_day <- as.data.frame(table(dem_nsw$Date))
filter(entry_count_per_day, Date != 48)
View(entry_count_per_day)
entry_count_per_day <- as.data.frame(table(dem_nsw$Date))
filter(entry_count_per_day, Freq != 48)
filter(as.data.frame(table(dem_nsw$Date)), Freq != 48)
# Remove the last row to make this easier
dem_nsw <- dem_nsw[-196513, ]
filter(as.data.frame(table(dem_nsw$Date)), Freq != 48)
# Do a left merge on dem and temp data
NSW_df <- left_join(dem_nsw, temp_nsw, by = c('Date', 'Time'))
View(NSW_df)
anti_join(NSW_df, dem_nsw)
as.data.frame(table(NSW_df$Time))
filter(as.data.frame(table(NSW_df$Date)), Freq != 48)
# Check for duplicates
NSW_df[duplicated(NSW_df[, ]), ]
# Check for duplicates
NSW_df[!duplicated(NSW_df[, ]), ]
# Check for duplicates
NSW_df <- NSW_df[!duplicated(NSW_df[, ]), ]
is.null(NSW_df)
as.data.frame(table(NSW_df$Time))
NSW_df[rowSums(is.na(NSW_df)) > 0, ]
NSW_df <- NSW_df %>%
mutate(Time = replace(Time, is.nan(Time), NA)) %>%
fill(Time)
NSW_df[rowSums(is.na(NSW_df)) > 0, ]
NSW_df <- NSW_df %>%
mutate(TEMPERATURE = replace(TEMPERATURE, is.nan(TEMPERATURE), NA)) %>%
fill(TEMPERATURE)
NSW_df[rowSums(is.na(NSW_df)) > 0, ]
# Export the NSW_df to csv so that others can use it.
write.csv(NSW_df, "\Cleaned_Data.csv", row.names = FALSE)
# Export the NSW_df to csv so that others can use it.
write.csv(NSW_df, "H03-2021/Cleaned_Data.csv", row.names = FALSE)
# Export the NSW_df to csv so that others can use it.
setwd('../data/')
write.csv(NSW_df, "H03-2021/Cleaned_Data.csv", row.names = FALSE)
# Export the NSW_df to csv so that others can use it.
setwd('../report/')
write.csv(NSW_df, "-2021/Cleaned_Data.csv", row.names = FALSE)
# Export the NSW_df to csv so that others can use it.
setwd('../report/')
write.csv(NSW_df, "2021/Cleaned_Data.csv", row.names = FALSE)
# Export the NSW_df to csv so that others can use it.
setwd('../report/')
write.csv(NSW_df, "/Cleaned_Data.csv", row.names = FALSE)
# Export the NSW_df to csv so that others can use it.
setwd('../report/')
write.csv(NSW_df, "Cleaned_Data.csv", row.names = FALSE)
