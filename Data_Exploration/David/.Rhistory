wday(NSW_df$DATETIME)#, label = FALSE)#, abbr = TRUE)
wday(NSW_df$DATETIME), abbr = TRUE)
wday(NSW_df$DATETIME, abbr = TRUE)
install.packages("chron")
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$year <- year(NSW_df$DATETIME) - 2000
NSW_df$month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
#NSW_df <- NSW_df[, -3]
NSW_df$Weekend <- grepl("S.+",weekdays(NSW_df$DATETIME))
NSW_df$Weekend <- NSW_df$Weekend*1
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$year <- year(NSW_df$DATETIME) - 2000
NSW_df$month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$is_wknd <- grepl("S.+",weekdays(NSW_df$DATETIME))
NSW_df$is_wknd <- NSW_df$is_wknd * 1
NSW_df$time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -3]
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
#NSW_df$year <- year(NSW_df$DATETIME) - 2000
NSW_df$month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$is_wknd <- grepl("S.+",weekdays(NSW_df$DATETIME))
NSW_df$is_wknd <- NSW_df$is_wknd * 1
NSW_df$time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -3]
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$year <- year(NSW_df$DATETIME) - 2000
NSW_df$month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$is_wknd <- grepl("S.+",weekdays(NSW_df$DATETIME))
NSW_df$is_wknd <- NSW_df$is_wknd * 1
NSW_df$time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -3]
#NSW_df <- subset(NSW_df, Year > 10)
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$year <- year(NSW_df$DATETIME)
SW_df <- subset(NSW_df, Year == 2021)
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, year == 2021)
NSW_df$month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$is_wknd <- grepl("S.+",weekdays(NSW_df$DATETIME))
NSW_df$is_wknd <- NSW_df$is_wknd * 1
NSW_df$time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -3]
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- Year(NSW_df$DATETIME)
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- Year(NSW_df$DATETIME)
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
NSW_df$Month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$Is_Wknd <- grepl("S.+", weekdays(NSW_df$DATETIME))
NSW_df$Is_Wknd <- NSW_df$Is_Wknd * 1
NSW_df$Time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -3]
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
NSW_df$Month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$Is_Wknd <- grepl("S.+", weekdays(NSW_df$DATETIME))
NSW_df$Is_Wknd <- NSW_df$Is_Wknd * 1
NSW_df$Time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -c(3, 4)]
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
NSW_df$Month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$Is_Wknd <- grepl("S.+", weekdays(NSW_df$DATETIME))
NSW_df$Is_Wknd <- NSW_df$Is_Wknd * 1
NSW_df$Time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -c(3, 4)]
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
NSW_df$Month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$Is_Wknd <- grepl("S.+", weekdays(NSW_df$DATETIME))
NSW_df$Is_Wknd <- NSW_df$Is_Wknd * 1
NSW_df$Time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -c(3, 4)]
# Normalize the data
maxs <- max(NSW_df$TEMPERATURE)
mins <- min(NSW_df$TEMPERATURE)
#maxs <- apply(NSW_df[, c(1,2)], 2, max)
#mins <- apply(NSW_df[, c(1,2)], 2, min)
NSW_df[, 2] <- scale(NSW_df[, 2], center = mins, scale = maxs - mins)
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
NSW_df$Month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$Is_Wknd <- grepl("S.+", weekdays(NSW_df$DATETIME))
NSW_df$Is_Wknd <- NSW_df$Is_Wknd * 1
NSW_df$Time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -c(3, 4)]
# Normalize the data
min <- min(NSW_df$TEMPERATURE)
max <- max(NSW_df$TEMPERATURE)
mean <- mean(NSW_df$TEMPERATURE)
std <- sd(NSW_df$TEMPERATURE)
NSW_df$TEMPERATURE <- ((NSW_df$TEMPERATURE - min) / (max - min))
#maxs <- apply(NSW_df[, c(1,2)], 2, max)
#mins <- apply(NSW_df[, c(1,2)], 2, min)
#NSW_df[, 2] <- scale(NSW_df[, 2], center = mins, scale = maxs - mins)
#library(NLP)
#library(splines)
#library(gam)
#library(mgcv)
#library(forecast)
#library(neuralnet)
#library(caTools)
#sample = sample.split(NSW_df$DATETIME, SplitRatio = .75)
#train = subset(NSW_df, sample == TRUE)
#test  = subset(NSW_df, sample == FALSE)
# define base model
model = keras_model_sequential() %>%
layer_dense(units=64, activation="relu", input_shape=3) %>%
layer_dense(units=32, activation = "relu") %>%
layer_dense(units=1)#, activation="linear")
summary(model)
model %>% compile(
loss = "mse",
optimizer =  "adam",
metrics = list("mean_absolute_error")
)
model %>% summary()
# Split the data into training and testing set
set.seed(2)
index <- sample(1:nrow(NSW_df), round(0.75 * nrow(NSW_df)))
train_ <- NSW_df[index,]
test_ <- NSW_df[-index,]
# fit model with dropout
registerDoParallel(cores=4)
system.time(mlpKerasDropout <- train(TOTALDEMAND ~ ., data = train_, method = 'mlpKerasDropout', trControl = trainControl(method = 'cv', number = 10)))
mlpKerasDropout
mlpKerasDropout$results %>%
arrange(RMSE) %>%
head(10)
system.time(mlpKerasDropout2 <- train(TOTALDEMAND ~ ., data = train_, method = 'mlpKerasDropout', trControl = trainControl(search = 'random', method = 'cv', number = 10), epochs = 10, tuneLength = 10))
mlpKerasDropout2
mlpKerasDropout$results %>%
arrange(RMSE) %>%
head(10)
mlpKerasDropout2$results %>%
arrange(RMSE) %>%
head(10)
system.time(mlpKerasDropout2 <- train(TOTALDEMAND ~ ., data = train_, method = 'mlpKerasDropout', trControl = trainControl(search = 'random', method = 'cv', number = 10), epochs = 10, tuneLength = 100))
mlpKerasDropout2
mlpKerasDropout2$results %>%
arrange(RMSE) %>%
head(10)
system.time(mlpKerasDropout2 <- train(TOTALDEMAND ~ ., data = train_, method = 'mlpKerasDropout', trControl = trainControl(search = 'random', method = 'cv', number = 10), epochs = 10, tuneLength = 100))
mlpKerasDropout2
mlpKerasDropout2$results %>%
arrange(RMSE) %>%
head(10)
predicted <- predict(mlpKerasDropout2, NSW_df[, -1])
NSW_df$Predicted <- predicted
NSW_df$Time_x <- sin(360/47 * NSW_df$Time)
NSW_df$Time_x <- sin(360/47 * NSW_df$Time)
NSW_df$Time_y <- cos(360/47 * NSW_df$Time)
NSW_df$Time_x_y <- cbind(sin(360/47 * NSW_df$Time), cos(360/47 * NSW_df$Time))
NSW_df$Time <- cbind(sin(360/47 * NSW_df$Time), cos(360/47 * NSW_df$Time))
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
NSW_df$Month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$Is_Wknd <- grepl("S.+", weekdays(NSW_df$DATETIME))
NSW_df$Is_Wknd <- NSW_df$Is_Wknd * 1
NSW_df$Time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -c(3, 4)]
# Normalize the data
min <- min(NSW_df$TEMPERATURE)
max <- max(NSW_df$TEMPERATURE)
mean <- mean(NSW_df$TEMPERATURE)
std <- sd(NSW_df$TEMPERATURE)
NSW_df$TEMPERATURE <- ((NSW_df$TEMPERATURE - min) / (max - min))
NSW_df$Time <- rbind(sin(360/47 * NSW_df$Time), cos(360/47 * NSW_df$Time))
NSW_df$Time <- tuple(sin(360/47 * NSW_df$Time), cos(360/47 * NSW_df$Time))
tuple(sin(360/47 * NSW_df$Time), cos(360/47 * NSW_df$Time))
NSW_df$Time_x <- sin(360/47 * NSW_df$Time)
NSW_df$Time_y <- cos(360/47 * NSW_df$Time)
# Import libraries
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(hms)
library(keras)
library(tensorflow)
library(tidyverse)
library(caret)
library(doParallel)
library(chron)
# Import cleaned data
NSW_df <- read.csv("../../report/Cleaned_Data.csv")
# Convert date and time to a datetime
NSW_df$DATETIME <- paste(NSW_df$Date, NSW_df$Time)
NSW_df$DATETIME <- dmy_hm(NSW_df$DATETIME)
NSW_df <- NSW_df[, -c(2,3)]
# Group based on certain conditions to make plotting easier
NSW_df$Year <- year(NSW_df$DATETIME)
NSW_df <- subset(NSW_df, Year == 2021)
NSW_df$Month <- month(NSW_df$DATETIME)
#NSW_df$day <- day(NSW_df$DATETIME)
NSW_df$Is_Wknd <- grepl("S.+", weekdays(NSW_df$DATETIME))
NSW_df$Is_Wknd <- NSW_df$Is_Wknd * 1
NSW_df$Time <- (hour(NSW_df$DATETIME)*60 + minute(NSW_df$DATETIME))/30
NSW_df <- NSW_df[, -c(3, 4)]
# Normalize the data
min <- min(NSW_df$TEMPERATURE)
max <- max(NSW_df$TEMPERATURE)
mean <- mean(NSW_df$TEMPERATURE)
std <- sd(NSW_df$TEMPERATURE)
NSW_df$TEMPERATURE <- ((NSW_df$TEMPERATURE - min) / (max - min))
NSW_df$Time_x <- sin(360/47 * NSW_df$Time)
NSW_df$Time_y <- cos(360/47 * NSW_df$Time)
NSW_df <- NSW_df[, -5]
# Split the data into training and testing set
set.seed(2)
index <- sample(1:nrow(NSW_df), round(0.75 * nrow(NSW_df)))
train_ <- NSW_df[index,]
test_ <- NSW_df[-index,]
# fit model with dropout
registerDoParallel(cores=4)
system.time(mlpKerasDropout <- train(TOTALDEMAND ~ ., data = train_, method = 'mlpKerasDropout', trControl = trainControl(method = 'cv', number = 10)))
# fit model with dropout
registerDoParallel(cores=4)
system.time(mlpKerasDropout <- train(TOTALDEMAND ~ ., data = train_, method = 'mlpKerasDropout', trControl = trainControl(method = 'cv', number = 10)))
